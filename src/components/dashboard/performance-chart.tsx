"use client"

import { Bar, BarChart, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Tooltip } from "recharts"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Info } from "lucide-react";
import { cn } from "@/lib/utils";

const baseChartConfig = {
  desktop: {
    label: "Desktop", // This can be a generic fallback or removed if not needed
    color: "hsl(var(--chart-1))",
  },
  mobile: { // This can be a generic fallback or removed if not needed
    label: "Mobile",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig;

interface ChartDataItem {
  month: string;
  [key: string]: any; // Allow other keys like revenue, users, etc.
}

interface PerformanceChartProps {
  title: string;
  description: string;
  dataKey: string; // Keep as string, as it's used as an index
  data: ChartDataItem[];
}

export function PerformanceChart({ title, description, dataKey, data }: PerformanceChartProps) {
  const dynamicChartConfig = {
    [dataKey]: {
      label: title, // Use the chart title as the label for the data key
      color: `hsl(var(--chart-${(Object.keys(baseChartConfig).indexOf(dataKey) % 2) + 1}))`, // Cycle through chart-1, chart-2 for colors
    }
  } as ChartConfig;

  return (
    <Card className={cn(
      "shadow-lg transition-all duration-300 hover:shadow-lg",
      "bg-gradient-to-br from-card via-card/90 to-background border-accent/20"
    )}>
      <CardHeader className="pb-2">
        <CardTitle className="font-headline text-lg">{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        {data && data.length > 0 ? (
          <ChartContainer config={dynamicChartConfig} className="h-[300px] w-full">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart accessibilityLayer data={data} margin={{ top: 5, right: 20, left: -20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="hsl(var(--border))" />
                <XAxis
                  dataKey="month"
                  tickLine={false}
                  tickMargin={10}
                  axisLine={false}
                  stroke="hsl(var(--muted-foreground))"
                  tickFormatter={(value) => value.slice(0, 3)}
                />
                <YAxis stroke="hsl(var(--muted-foreground))" tickLine={false} axisLine={false} tickMargin={10} />
                <Tooltip
                  cursor={{fill: 'rgba(255, 255, 255, 0.05)'}}
                  content={<ChartTooltipContent indicator="dashed" hideLabel />}
                />
                <Bar 
                  dataKey={dataKey} 
                  fill={`var(--color-${dataKey})`} 
                  radius={[4, 4, 0, 0]} 
                  className="hover:opacity-80 transition-opacity"
                />
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        ) : (
          <div className="h-[300px] flex flex-col items-center justify-center text-muted-foreground">
            <Info className="h-10 w-10 mb-2 animate-pulse" />
            <p>No data available to display.</p>
            <p className="text-xs">This chart will populate once data is generated by the simulation.</p>
          </div>
        )}
      </CardContent>
    </Card>
  )
}